#define _CRT_SECURE_NO_WARNINGS
#include <opencv2/core/core.hpp>
#include<opencv2/highgui/highgui.hpp>
#include<opencv2/imgproc/imgproc.hpp>
#include <tesseract/baseapi.h>
#include <leptonica/allheaders.h>
#include <iostream>
#include <string.h>
#include <ctype.h>
#include <vector>
using namespace std;
using namespace cv;
#define GRAY_THRESH 150
#define HOUGH_VOTE 100

string str_process(char *b,int &flag)
{
	string t="";
	int len = strlen(b);
	for (int i = len - 1; i >= 0; i--)
		if (!isdigit(b[i]))b[i] = '\0';
		else break;
	char a[100];
	for (int i = len - 1; i >= 0; i--)
		if (b[i] == ' '){
			strcpy(a, b + i + 1);
			break;
		}
		else if (i == 0)
			strcpy(a, b);
	len = strlen(a);
	if (len >= 12&&flag==0)
	{
		if (len <= 18){
			for (int i = len - 12; i < len; i++)
				t += a[i];
			flag = 1;
		}
	}
	else if (flag){
		if (len >= 8)
		{
			if (len <= 14)
				for (int i = len - 8; i < len; i++)
					t += a[i];
		}
		else
			for (int i = 0; i < strlen(b); i++)
				t += b[i];
	}
	printf("%s...%s len:%d\n", b,a,len);
	return t;
}
Mat TiltCorrection(string datapath)
{
	Mat srcImg = imread(datapath,0);
	//压缩
	//imshow("zuukaishi", srcImg);
	if (srcImg.rows*srcImg.cols>1000000)
	{
		int t;
		if (srcImg.cols>srcImg.rows)t = 1000;
				else t = 500;
		resize(srcImg, srcImg, Size(t, srcImg.rows*1.0 / srcImg.cols * t), 0, 0, CV_INTER_LINEAR);
	}

	//return srcImg;
	Point center(srcImg.cols / 2, srcImg.rows / 2);



	//Expand image to an optimal size, for faster processing speed
	//Set widths of borders in four directions
	//If borderType==BORDER_CONSTANT, fill the borders with (0,0,0)
	Mat padded;
	int opWidth = getOptimalDFTSize(srcImg.rows);
	int opHeight = getOptimalDFTSize(srcImg.cols);
	copyMakeBorder(srcImg, padded, 0, opWidth - srcImg.rows, 0, opHeight - srcImg.cols, BORDER_CONSTANT, Scalar::all(0));

	Mat planes[] = { Mat_<float>(padded), Mat::zeros(padded.size(), CV_32F) };
	Mat comImg;
	//Merge into a double-channel image
	merge(planes, 2, comImg);

	//Use the same image as input and output,
	//so that the results can fit in Mat well
	dft(comImg, comImg);

	//Compute the magnitude
	//planes[0]=Re(DFT(I)), planes[1]=Im(DFT(I))
	//magnitude=sqrt(Re^2+Im^2)
	split(comImg, planes);
	magnitude(planes[0], planes[1], planes[0]);

	//Switch to logarithmic scale, for better visual results
	//M2=log(1+M1)
	Mat magMat = planes[0];
	magMat += Scalar::all(1);
	log(magMat, magMat);

	//Crop the spectrum
	//Width and height of magMat should be even, so that they can be divided by 2
	//-2 is 11111110 in binary system, operator & make sure width and height are always even
	magMat = magMat(Rect(0, 0, magMat.cols & -2, magMat.rows & -2));

	//Rearrange the quadrants of Fourier image,
	//so that the origin is at the center of image,
	//and move the high frequency to the corners
	int cx = magMat.cols / 2;
	int cy = magMat.rows / 2;

	Mat q0(magMat, Rect(0, 0, cx, cy));
	Mat q1(magMat, Rect(0, cy, cx, cy));
	Mat q2(magMat, Rect(cx, cy, cx, cy));
	Mat q3(magMat, Rect(cx, 0, cx, cy));

	Mat tmp;
	q0.copyTo(tmp);
	q2.copyTo(q0);
	tmp.copyTo(q2);

	q1.copyTo(tmp);
	q3.copyTo(q1);
	tmp.copyTo(q3);

	//Normalize the magnitude to [0,1], then to[0,255]
	normalize(magMat, magMat, 0, 1, CV_MINMAX);
	Mat magImg(magMat.size(), CV_8UC1);
	magMat.convertTo(magImg, CV_8UC1, 255, 0);
	//imshow("magnitude", magImg);
	//imwrite("imageText_mag.jpg",magImg);

	//Turn into binary image
	threshold(magImg, magImg, GRAY_THRESH, 255, CV_THRESH_BINARY);
	//imshow("mag_binary", magImg);
	//imwrite("imageText_bin.jpg",magImg);

	//Find lines with Hough Transformation
	vector<Vec2f> lines;
	float pi180 = (float)CV_PI / 180;
	Mat linImg(magImg.size(), CV_8UC3);
	HoughLines(magImg, lines, 1, pi180, HOUGH_VOTE, 0, 0);
	int numLines = lines.size();
	for (int l = 0; l<numLines; l++)
	{
		float rho = lines[l][0], theta = lines[l][1];
		Point pt1, pt2;
		double a = cos(theta), b = sin(theta);
		double x0 = a*rho, y0 = b*rho;
		pt1.x = cvRound(x0 + 1000 * (-b));
		pt1.y = cvRound(y0 + 1000 * (a));
		pt2.x = cvRound(x0 - 1000 * (-b));
		pt2.y = cvRound(y0 - 1000 * (a));
		line(linImg, pt1, pt2, Scalar(255, 0, 0), 3, 8, 0);
	}
	//imshow("lines", linImg);
	//imwrite("imageText_line.jpg",linImg);
	if (lines.size() == 3){
		cout << "found three angels:" << endl;
		cout << lines[0][1] * 180 / CV_PI << endl << lines[1][1] * 180 / CV_PI << endl << lines[2][1] * 180 / CV_PI << endl << endl;
	}

	//Find the proper angel from the three found angels
	float angel = 0;
	float piThresh = (float)CV_PI / 90;
	float pi2 = CV_PI / 2;
	for (int l = 0; l<numLines; l++)
	{
		float theta = lines[l][1];
		if (abs(theta) < piThresh || abs(theta - pi2) < piThresh)
			continue;
		else{
			angel = theta;
			break;
		}
	}

	//Calculate the rotation angel
	//The image has to be square,
	//so that the rotation angel can be calculate right
	angel = angel<pi2 ? angel : angel - CV_PI;
	if (angel != pi2){
		float angelT = srcImg.rows*tan(angel) / srcImg.cols;
		angel = atan(angelT);
	}
	float angelD = angel * 180 / (float)CV_PI;
	cout << "the rotation angel to be applied:" << endl << angelD << endl << endl;

	//Rotate the image to recover
	Mat rotMat = getRotationMatrix2D(center, angelD, 1.0);
	Mat dstImg = Mat::ones(srcImg.size(), CV_8UC3);
	warpAffine(srcImg, dstImg, rotMat, srcImg.size(), 1, 0, Scalar(255, 255, 255));
	//imshow("result", dstImg);
	if (abs(angelD)<45.0)return dstImg;
	return srcImg;
}

string ocr(Mat data, Rect r,int &flag){
    char *outText;
    tesseract::TessBaseAPI *api = new tesseract::TessBaseAPI();
    // Initialize tesseract-ocr with English, without specifying tessdata path
    if (api->Init(NULL, "chi_sim")) {
        fprintf(stderr, "Could not initialize tesseract.\n");
        exit(1);
    }
    api->SetPageSegMode(tesseract::PSM_SPARSE_TEXT_OSD);
    cv::Mat sub = data(r);
    //imshow("t",sub);
    api->SetImage((uchar*)sub.data, sub.size().width, sub.size().height, sub.channels(), sub.step1());
    // Get OCR result
    outText = api->GetUTF8Text();
    printf("%s ",outText);
    //cout<<outText<<endl;
    api->Clear();
    api->End();
    //waitKey(0);
	//return str_process(outText,flag);
	return outText;
}


int main(int argc, char* argv[])
{
	vector<string>daima;
	int flag = 0;
	//string path = argv[1];
	string path ="test/5.jpg";
	Mat image = TiltCorrection(path);
	//resize(image, image, Size(500,image.rows*1.0/image.cols*500 ), 0, 0, CV_INTER_LINEAR);
	//Mat image = imread(path, 1);
	//imshow("原图", image);
	//读入原图
	Mat gray ,data;
	//cvtColor(image, gray, CV_BGR2GRAY);
	data = image.clone();
	gray = image.clone();
	//threshold(gray, gray, 140, 255, THRESH_BINARY_INV);
	int blockSize = 25;
	int constValue = 10;
    cv::adaptiveThreshold(gray, gray, 255, CV_ADAPTIVE_THRESH_MEAN_C, CV_THRESH_BINARY_INV, blockSize, constValue);
	//二值化
	//imshow("二值化", gray);
	imshow("灰度",gray);

    data=gray.clone();
	//转灰度图

	//获取自定义核
	Mat element = getStructuringElement(MORPH_RECT, Size(5, 5));

	//进行腐蚀操作
	dilate(gray, gray, element);
	imshow("腐蚀", gray);



	vector<vector<Point> > contours;
	findContours(gray, contours, CV_RETR_EXTERNAL, CV_CHAIN_APPROX_NONE);
	Mat result(gray.size(), CV_8U, Scalar(255));
	//drawContours(image, contours,-1, Scalar(0), 2);
	//imshow("1", image);

	int count = contours.size();
	int flag2 = 1,x,y,width;
	for (int i = count-1; i >=0 ; i--)
	{
		Rect r0 = boundingRect(Mat(contours[i]));
         if(r0.area()>1000&&r0.area()<3000)rectangle(data, r0, Scalar(100,0,0), 2),ocr(data,r0,flag);;
        printf("%d \n",r0.area());

       //
        //printf("%d\n",ocr(data,r0,flag));
	}
	imshow("发票",data);
	FILE * fp = fopen("ocrresult.txt", "at");
	char s[][20] = { "发票代码:", "发票号码:", "验证码:" };
	for (int i = 0; i < daima.size()&&i<3; i++){
		cout << s[i] << daima[i] << endl;
		fprintf(fp, "%s\n", daima[i].c_str());
		if (daima[0][0] != '2'&&i == 1)break;
	}
	fclose(fp);
	imwrite("temp.jpg", image);
	waitKey(0);
	destroyAllWindows();
	return 0;
}

